<?php

require_once 'admin/lib/Admin/RouteCollection.php';
require_once 'admin/lib/Admin/Route.php';

/**
 * Test class for RouteCollection.
 * Generated by PHPUnit on 2011-10-05 at 18:32:25.
 */
class RouteCollectionTest extends PHPUnit_Framework_TestCase {
	/**
	 * @var \Admin\RouteCollection
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new \Admin\RouteCollection();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	public function testCount() {
		$this->assertEquals(0, $this->object->count());
	}
	
	/**
	 * @covers \Admin\RouteCollection::rewind
	 * @covers \Admin\RouteCollection::current
	 * @covers \Admin\RouteCollection::key
	 * @covers \Admin\RouteCollection::valid
	 * @covers \Admin\RouteCollection::next
	 */
	public function testIteratable() {
		$route1 = new \Admin\Route('/');
		$route2 = new \Admin\Route('/foo/'); 
		$data = array(
			array($route1, function() {}, 'root'),
			array($route2, function() {}, null),
		);
		
		foreach ($data as $item) {
			$this->object->add($item[0], $item[1], $item[2]);
		}
		
		$i = 0;
		foreach ($this->object as $name => $route) {
			$this->assertTrue($data[$i][0] === $route);
			if ($name != $data[$i][2])
				$this->assertEquals($data[$i][2], $name);
			
			$i++;
		} 
		
		$this->assertEquals(count($data), $i);
	}

	public function testAdd() {
		$route = new \Admin\Route('/');
		$closure = function() {};

		$this->object->add($route, $closure);
		$this->assertEquals(1, $this->object->count());
		
		$this->object->add($route, $closure, 'test');
		$this->assertEquals(2, $this->object->count());
		$this->assertTrue($route === $this->object->getRoute('test'));
		$this->assertTrue($closure === $this->object->getCallback('test'));
	}

	/**
	 * @covers \Admin\RouteCollection::getRoute
	 * @covers \Admin\RouteCollection::getCallback
	 */
	public function testGetRoute() {
		$route = new \Admin\Route('/');
		$closure = function() {};

		$name = 'test';
		$this->object->add($route, $closure, $name);
		$this->assertEquals($route, $this->object->getRoute($name));
		$this->assertEquals($closure, $this->object->getCallback($name));
	}
}

?>
