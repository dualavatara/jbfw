<?php

require_once 'admin/lib/Admin/Route.php';

/**
 * Test class for Route.
 * Generated by PHPUnit on 2011-10-04 at 15:48:47.
 */
class RouteTest extends PHPUnit_Framework_TestCase
{
	public function test__constructor()
	{
		$route = new \Admin\Route('');
	}
	
    /**
     * @covers \Admin\Route::match
     */
    public function testMatchRoot()
    {
		$route = new \Admin\Route('/');
		$this->assertEquals(array(), $route->match('/'));
		
		$this->assertFalse($route->match(''));
		$this->assertFalse($route->match('//'));
	}
	
    /**
     * @covers \Admin\Route::match
     */
    public function testMatch()
    {
		$route = new \Admin\Route('/test/');
		$this->assertEquals(array(), $route->match('/test/'));
		
		$this->assertFalse($route->match('/'));
		$this->assertFalse($route->match('/test'));
		$this->assertFalse($route->match('/test//'));
		$this->assertFalse($route->match('/test/?')); // path can not contain query string
		$this->assertFalse($route->match('/test/abc'));
	}   
	
	/**
     * @covers \Admin\Route::match
     */
    public function testMatchParametrized()
    {
		$route = new \Admin\Route('/test/{foo}/');
		$this->assertEquals(array('foo' => 'bar'), $route->match('/test/bar/'));
		$this->assertEquals(array('foo' => '123'), $route->match('/test/123/'));
		$this->assertEquals(array('foo' => ''), $route->match('/test//'));
		
		$this->assertFalse($route->match('/test/'));
		$this->assertFalse($route->match('/test/abc/a'));
		$this->assertFalse($route->match('/test/abc/?a=b')); // path can not contain query string
	}
	
	/**
     * @covers \Admin\Route::match
     */
	public function testMatchWithSlash() {
		$route = new \Admin\Route('/test/{key}/{foo}');
		$test = array('key' => 'value', 'foo' => 'bar/baz');
		$this->assertEquals($test, $route->match('/test/value/bar%2Fbaz'));
	}
	
	/**
     * @covers \Admin\Route::getUrl
     */
    public function testGetUrl()
    {
        $route = new \Admin\Route('/');
		$this->assertEquals('/', $route->getUrl());
		$this->assertEquals('/?foo=bar', $route->getUrl(array('foo' => 'bar')));
		$this->assertEquals('/?foo=bar&a=b', $route->getUrl(array('foo' => 'bar', 'a' => 'b')));
    }
	
	public function testGetUrlTwoParams() {
		$route = new \Admin\Route('/test/{foo}/{test}');
		$this->assertEquals('/test/bar/1', $route->getUrl(array('foo' => 'bar', 'test' => 1)));
		$this->assertEquals('/test/bar/1?a=b', $route->getUrl(array('foo' => 'bar', 'test' => 1, 'a' => 'b')));
		
		$this->assertFalse($route->getUrl());
	}
	
	/**
     * @covers \Admin\Route::getUrl
     */
    public function testGetUrlParametrized()
    {
    	$route = new \Admin\Route('/test/{foo}/');
		$this->assertEquals('/test/bar/', $route->getUrl(array('foo' => 'bar')));
		$this->assertEquals('/test/bar/?a=b', $route->getUrl(array('foo' => 'bar', 'a' => 'b')));
		
		$this->assertFalse($route->getUrl());
    }	
	
	/**
     * @covers \Admin\Route::getUrl
     */
    public function testGetUrlDefaults()
    {
		$defaults = array('foo' => 'bar');
		$route = new \Admin\Route('/test/{foo}/', $defaults);
		$this->assertEquals('/test/bar/', $route->getUrl());
		$this->assertEquals('/test/baz/', $route->getUrl(array('foo' => 'baz')));
		$this->assertEquals('/test/baz/?a=b', $route->getUrl(array('foo' => 'baz', 'a' => 'b')));
    }
	
	/**
     * @covers \Admin\Route::getUrl
     */
	public function testGetUrlEncode()
	{
		$defaults = array('foo' => 'bar baz');
		$route = new \Admin\Route('/test/{foo}/', $defaults);
		$this->assertEquals('/test/bar+baz/', $route->getUrl());
		$this->assertEquals('/test/bar%25baz/', $route->getUrl(array('foo' => 'bar%baz')));
	}
}
?>
