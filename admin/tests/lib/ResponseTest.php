<?php

// Mocking header function
namespace Admin {
	
	// Using class with static field because of variable can not be bind to namespace
	class Headers {
		static public $values = array();
	}

	function header($str) {
		Headers::$values[] = $str;
	}
}

// Reset to global namespace
namespace {
require_once 'admin/lib/Admin/Response.php';


/**
 * Test class for Response.
 * Generated by PHPUnit on 2011-10-27 at 14:44:37.
 */
class ResponseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Admin\Response
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Admin\Response('content');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

	public function testDefaults() {
		$this->assertEquals(200, $this->object->getStatusCode());
		$this->assertEquals(array(), $this->object->getHeaders());
	} 
	

    public function testGetStatusCode()
    {
        $response = new Admin\Response('test', 304);
		$this->assertEquals(304, $response->getStatusCode());
    }

    public function testGetContent()
    {
        $this->assertEquals('content', $this->object->getContent());
    }

    public function testGetHeaders()
    {
		$headers = array('foo' => 'bar');
		
        $response = new Admin\Response('test', 304, $headers);
		$intersect = array_intersect_assoc($headers, $response->getHeaders());
		$this->assertEquals($headers, $intersect);
    }
	
	public function testSend() {
		$response = new Admin\Response('content', 200, array('X-TEST-HEADER' => 'foo'));
		
		ob_start();
		$response->send();
		$result = ob_get_clean();
		$this->assertEquals('content', $result);
		
		
		$this->assertContains('HTTP/1.1 200 OK', Admin\Headers::$values);
		$this->assertContains('X-TEST-HEADER: foo', Admin\Headers::$values);
	}
}

} // Namespace end
?>