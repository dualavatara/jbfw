<?php
namespace Admin\Extension\Template\Decorator;

require_once 'admin/lib/Admin/Extension/Template/Escaper/Escaper.php';
require_once 'admin/lib/Admin/Extension/Template/Decorator/BaseDecorator.php';
require_once 'admin/lib/Admin/Extension/Template/Decorator/ObjectDecorator.php';

/**
 * Test class for ObjectDecorator.
 * Generated by PHPUnit on 2011-12-22 at 17:48:14.
 */
class ObjectDecoratorTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var ObjectDecorator
	 */
	protected $object;
	
	/**
	 * @var SampleObjectClass
	 */
	protected $instance;
	
	public $calls = 0;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$me = $this;
		$escaper = new \Admin\Extension\Template\Escaper\Escaper(function($value) use ($me) {
			$me->calls++;
			return $value;
		});

		$this->instance = new SampleObjectClass();

		$this->object = new ObjectDecorator($escaper, $this->instance);
	}

	public function test__call() {
		$this->assertEquals($this->instance->foo(), $this->object->foo());
		$this->assertEquals($this->instance->bar(123), $this->object->bar(123));
		
		// This call will not be escaped because of null returned)
		$this->assertEquals($this->instance->bar(), null);
		$this->assertEquals($this->instance->bar(), $this->object->bar()); 
		
		$this->assertEquals(2, $this->calls);
	}

	public function test__toString() {
		$this->assertEquals('' . $this->instance, '' . $this->object);
		$this->assertEquals(1, $this->calls);
	}

	public function test__get() {
		$this->assertEquals($this->instance->pub, $this->object->pub);
		$this->assertEquals($this->instance->getter, $this->object->getter);
		$this->assertEquals(2, $this->calls);
	}

	public function test__isset() {
		$this->assertTrue(isset($this->object->pub));
	}
}

class SampleObjectClass {
	public  $pub = 'test';
	
	function foo() {
		return 'foo';
	}
	
	function __call($name, $arguments) {
		if ('bar' == $name) {
			return isset($arguments[0]) ? $arguments[0] : null;
		}
		
		return null;
	}
	
	function __toString() {
		return __CLASS__;
	}
	
	function __get($name) {
		if ('getter' == $name) {
			return 'foo';
		}
		
		return null;
	}
}

?>
