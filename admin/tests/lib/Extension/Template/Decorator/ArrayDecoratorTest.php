<?php
namespace Admin\Extension\Template\Decorator;

require_once 'admin/lib/Admin/Extension/Template/Escaper/Escaper.php';
require_once 'admin/lib/Admin/Extension/Template/Decorator/BaseDecorator.php';
require_once 'admin/lib/Admin/Extension/Template/Decorator/ArrayDecorator.php';

/**
 * Test class for ArrayDecorator.
 * Generated by PHPUnit on 2011-12-22 at 17:46:56.
 */
class ArrayDecoratorTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var ArrayDecorator
	 */
	protected $object;
	
	/**
	 * @var Array
	 */
	protected $testArray;
	
	public $calls = 0;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$me = $this;
		$escaper = new \Admin\Extension\Template\Escaper\Escaper(function($value) use ($me) {
			$me->calls++;
			return $value;
		});

		$this->testArray = array(1, 2, null, 'foo', 'bar' => 'baz');
		
		$this->object = new ArrayDecorator($escaper, $this->testArray);
	}
	
	public function testGetRaw() {
		$this->assertTrue($this->testArray === $this->object->getRaw());
	}

	/**
	 * @covers \Admin\Extension\Template\Decorator\ArrayDecorator::rewind
	 * @covers \Admin\Extension\Template\Decorator\ArrayDecorator::current
	 * @covers \Admin\Extension\Template\Decorator\ArrayDecorator::next
	 * @covers \Admin\Extension\Template\Decorator\ArrayDecorator::key
	 * @covers \Admin\Extension\Template\Decorator\ArrayDecorator::valid
	 */
	public function testIterator() {
		foreach ($this->object as $key => $value) {
			$this->assertEquals($value, $this->testArray[$key]);
		}
		
		$this->assertEquals(count($this->testArray) - 1, $this->calls); // null was not escaped
	}

	public function testOffsetExists() {
		$this->assertTrue($this->object->offsetExists(0));
		$this->assertTrue($this->object->offsetExists(1));
		$this->assertTrue($this->object->offsetExists(2));
		$this->assertTrue($this->object->offsetExists(3));
		$this->assertTrue($this->object->offsetExists('bar'));
		
		$this->assertFalse($this->object->offsetExists('foo'));
		$this->assertFalse($this->object->offsetExists('baz'));
		$this->assertFalse($this->object->offsetExists(4));
	}

	public function testOffsetGet() {
		$this->assertEquals(1, $this->object->offsetGet(0));
		$this->assertEquals(2, $this->object->offsetGet(1));
		$this->assertEquals(null, $this->object->offsetGet(2));
		$this->assertEquals('foo', $this->object->offsetGet(3));
		$this->assertEquals('baz', $this->object->offsetGet('bar'));
		
		$this->assertEquals(count($this->testArray) - 1, $this->calls); // null was not escaped
	}

	/**
	 * @expectedException BadMethodCallException
	 */
	public function testOffsetSet() {
		$this->object->offsetSet(0, 'foo');
	}

	/**
	 * @expectedException BadMethodCallException
	 */
	public function testOffsetUnset() {
		$this->object->offsetUnset(0);
	}

	public function testCount() {
		$this->assertEquals(count($this->testArray), $this->object->count());
		$this->assertEquals(count($this->testArray), count($this->object));
	}
}

?>
