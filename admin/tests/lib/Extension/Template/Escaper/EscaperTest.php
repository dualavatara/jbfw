<?php
namespace Admin\Extension\Template\Escaper;

require_once 'admin/lib/Admin/Extension/Template/Escaper/Escaper.php';

require_once 'admin/lib/Admin/Extension/Template/Decorator/BaseDecorator.php';
require_once 'admin/lib/Admin/Extension/Template/Decorator/ArrayDecorator.php';
require_once 'admin/lib/Admin/Extension/Template/Decorator/ObjectDecorator.php';
require_once 'admin/lib/Admin/Extension/Template/Decorator/IteratorDecorator.php';

/**
 * Test class for Escaper.
 * Generated by PHPUnit on 2011-12-22 at 12:16:14.
 */
class EscaperTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Escaper
	 */
	protected $object;

	/**
	 * @var \Closure
	 */
	protected $func;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->func = function ($value) { return $value; };

		$this->object = new Escaper($this->func);
	}
	
	public function testConstructor() {
		$this->assertInstanceOf('\Admin\Extension\Template\Escaper\Escaper', $this->object);
	}

	/**
	 * @covers \Admin\Extension\Template\Escaper\Escaper::escape
	 */
	public function testEscapeNull() {
		$result = $this->object->escape(null);
		$this->assertEquals(null, $result);
	}

	/**
	 * @covers \Admin\Extension\Template\Escaper\Escaper::escape
	 */
	public function testEscapeString() {
		$string = 'foo<>';
		$result = $this->object->escape($string);
		$method = $this->func;
		$this->assertEquals($method($string), $result);
	}

	/**
	 * @covers \Admin\Extension\Template\Escaper\Escaper::escape
	 */
	public function testEscapeNumber() {
		$result = $this->object->escape(123);
		$this->assertEquals(123, $result);

		$result = $this->object->escape(3.14);
		$this->assertEquals(3.14, $result);
	}

	/**
	 * @covers \Admin\Extension\Template\Escaper\Escaper::escape
	 */
	public function testEscapeBool() {
		$result = $this->object->escape(false);
		$this->assertFalse($result);

		$result = $this->object->escape(true);
		$this->assertTrue($result);
	}

	/**
	 * @covers \Admin\Extension\Template\Escaper\Escaper::escape
	 */
	public function testEscapeArray() {
		$array  = array(1, 2, 'foo');
		$result = $this->object->escape($array);
		$this->assertInstanceOf('\Admin\Extension\Template\Decorator\ArrayDecorator', $result);
		$this->assertEquals($array, $result->getRaw());
	}

	/**
	 * @covers \Admin\Extension\Template\Escaper\Escaper::escape
	 */
	public function testEscapeObject() {
		$object = new \stdClass();
		$result = $this->object->escape($object);
		$this->assertInstanceOf('\Admin\Extension\Template\Decorator\ObjectDecorator', $result);
		$this->assertEquals($object, $result->getRaw());
	}

	/**
	 * @covers \Admin\Extension\Template\Escaper\Escaper::escape
	 */
	public function testEscapeClosure() {
		$closure = function () { return 123; };
		$result = $this->object->escape($closure);
		$this->assertInstanceOf('\Closure', $result);
		$this->assertEquals($closure(), $result());
	}

	/**
	 * @covers            \Admin\Extension\Template\Escaper\Escaper::escape
	 * @expectedException InvalidArgumentException
	 */
	public function testEscapeResource() {
		$resource = fopen(__FILE__, 'r');
		$result   = $this->object->escape($resource);
	}
	
	/**
	 * @covers \Admin\Extension\Template\Escaper\Escaper::escape
	 */
	public function testDoubleEscape() {
		$object = new \stdClass();
		$result1 = $this->object->escape($object);
		$result2 = $this->object->escape($result1);
		$this->assertEquals($result1, $result2);
	}
	
	/**
	 * @covers \Admin\Extension\Template\Escaper\Escaper::escape
	 */
	public function testEscapeTraversable() {
		$array = new \ArrayObject();
		$result = $this->object->escape($array);
		$this->assertInstanceOf('\Traversable', $result);
		$this->assertEquals($array, $result->getRaw());
	}
}

?>
