<?php

require_once 'admin/lib/Admin/Container.php';

/**
 * Test class for Container.
 * Generated by PHPUnit on 2011-10-05 at 11:18:05.
 */
class ContainerTest extends PHPUnit_Framework_TestCase {
	/**
	 * @var \Admin\Container
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new \Admin\Container();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	public function testShare() {
		$this->object['foo'] = $this->object->share( function() { return new stdClass(); } );
		
		$result1 = $this->object['foo'];
		$result2 = $this->object['foo'];
		
		$this->assertTrue($result1 === $result2);
	}

	public function testOffsetExists() {
		$this->assertFalse($this->object->offsetExists('foo2'));

		$this->object['foo'] = 'bar';
		$this->assertTrue($this->object->offsetExists('foo'));

		$this->object['foo'] = null;
		$this->assertTrue($this->object->offsetExists('foo'));
	}

	/**
	 * @covers \Admin\Container::offsetGet
	 * @covers \Admin\Container::offsetSet
	 * @return void
	 */
	public function testOffsetSetAndGet() {
		$this->object['foo'] = 'bar';
		$object = new stdClass();
		$this->object['closure'] = $object;

		$this->assertEquals('bar', $this->object->offsetGet('foo'));
		$this->assertEquals($object, $this->object->offsetGet('closure'));
	}

	/**
	 * @covers \Admin\Container::offsetGet
	 * @return void
	 */
	public function testOffsetGetClosure() {
		$object = new stdClass();
		$this->object['foo'] = function() use ($object) { return $object; };

		$result = $this->object->offsetGet('foo');
		$this->assertTrue($object === $result);
		
		$this->object['foo'] = function() { return new stdClass(); };
		$object1 = $this->object['foo'];
		$object2 = $this->object['foo'];
		$this->assertFalse($object1 === $object2);
	}

	public function testOffsetUnset() {
		$this->object['foo'] = 'bar';
		$this->assertTrue($this->object->offsetExists('foo'));

		$this->object->offsetUnset('foo');
		$this->assertFalse($this->object->offsetExists('foo'));
	}
}

?>
