<?php

require_once 'admin/lib/Admin/Request.php';

/**
 * Test class for Request.
 * Generated by PHPUnit on 2011-10-04 at 14:31:47.
 */
class RequestTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var \Admin\Request
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$params = array(
			'param' => 'params',
			'test'  => 'params',
			'null'  => null,
		);
		$get    = array(
			'param' => 'get',
			'foo'   => 'bar',
			'test'  => 'get',
		);
		$post   = array(
			'foo'  => 'baz',
			'test' => 'post',
		);

		$this->object = new \Admin\Request($params, $get, $post);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	public function testCreateFromGlobals() {
		$_GET['foo1']   = 'bar1';
		$_POST['foo2']  = 'bar2';
		$params['foo3'] = 'bar3';

		$request = \Admin\Request::createFromGlobals($params);
		$this->assertInstanceOf('\Admin\Request', $request);
		$this->assertEquals('bar1', $request['foo1']);
		$this->assertEquals('bar2', $request['foo2']);
		$this->assertEquals('bar3', $request['foo3']);

		unset($_GET['foo1'], $_POST['foo2']);
	}

	public function testOffsetExists() {
		$this->assertTrue($this->object->offsetExists('foo'));

		$this->assertTrue($this->object->offsetExists('null'));

		$this->assertFalse($this->object->offsetExists('unsettedparamname'));
	}

	public function testOffsetGet() {
		$foo = $this->object->offsetGet('foo');
		$this->assertEquals('baz', $foo);

		$param = $this->object->offsetGet('param');
		$this->assertEquals('get', $param);

		$test = $this->object->offsetGet('test');
		$this->assertEquals('post', $test);
	}

	/**
	 * @expectedException BadMethodCallException
	 */
	public function testOffsetSet() {
		$this->object->offsetSet('foo', 'bar');
	}

	/**
	 * @expectedException BadMethodCallException
	 */
	public function testOffsetUnset() {
		$this->object->offsetUnset('foo');
	}
}

?>
