<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-03-20 at 00:56:40.
 */
require_once 'lib/ModelData.php';
//require_once 'lib/field.lib.php';

class ModelDataTest extends PHPUnit_Framework_TestCase {
	/**
	 * @var ModelData
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new ModelData('testtable');
		$this->object->field(new CharField('first_field'));
		$this->object->field(new CharField('second_field'));

		$this->object->data = array(
			array('id' => 12, 'first_field' => "test string one", 'second_field' => 'some string one'),
			array('id' => 34, 'first_field' => "test string two", 'second_field' => 'some string two'),
			array('id' => 76, 'first_field' => "test string three", 'second_field' => 'some string three'),
		);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	/**
	 * @covers ModelData::field
	 */
	public function testField() {
		$this->assertInstanceOf('IntField', $this->object->fields['id']);
		$this->assertInstanceOf('CharField', $this->object->fields['first_field']);
		$this->assertInstanceOf('CharField', $this->object->fields['second_field']);
	}

	/**
	 * @covers ModelData::offsetExists
	 */
	public function testOffsetExists() {
		$this->assertTrue(isset($this->object[0]));
		$this->assertTrue(isset($this->object[1]));
		$this->assertTrue(isset($this->object[2]));
		$this->assertFalse(isset($this->object[3]));
	}

	/**
	 * @covers ModelData::offsetGet
	 * @expectedException ModelException
	 */
	public function testOffsetGetInvalid() {
		$this->object[3];
	}

	/**
	 * @covers ModelData::offsetGet
	 */
	public function testOffsetGet() {
		$w = $this->object[1];
		$this->assertInstanceOf('ModelDataWrapper', $w);
	}

	/**
	 * @covers ModelData::offsetSet
	 */
	public function testOffsetSet() {
		$this->object[0] = array(
			'id' => 76,
			'first_field' => "test string three",
			'second_field' => 'some string three'
		);
		$this->assertEquals($this->object->data, array(
				array('id' => 76, 'first_field' => "test string three", 'second_field' => 'some string three'),
				array('id' => 34, 'first_field' => "test string two", 'second_field' => 'some string two'),
				array('id' => 76, 'first_field' => "test string three", 'second_field' => 'some string three'),
			));

		$this->object[3] = array('id' => 12, 'first_field' => "test string one", 'second_field' => 'some string one');
		$this->assertEquals($this->object->data, array(
				array('id' => 76, 'first_field' => "test string three", 'second_field' => 'some string three'),
				array('id' => 34, 'first_field' => "test string two", 'second_field' => 'some string two'),
				array('id' => 76, 'first_field' => "test string three", 'second_field' => 'some string three'),
				array('id' => 12, 'first_field' => "test string one", 'second_field' => 'some string one')
			));
	}

	/**
	 * @covers ModelData::offsetUnset
	 */
	public function testOffsetUnset() {
		unset($this->object[0]);
		$this->assertEquals($this->object->data, array(
				1 => array('id' => 34, 'first_field' => "test string two", 'second_field' => 'some string two'),
				2 => array('id' => 76, 'first_field' => "test string three", 'second_field' => 'some string three'),
			));
	}

	/**
	 * @covers ModelData::current
	 */
	public function testCurrentKeyNextRewindValid() {
		$this->assertEquals(array(
				'id' => 12,
				'first_field' => "test string one",
				'second_field' => 'some string one'
			), $this->object->current()->all());
		$this->assertEquals(0, $this->object->key());
		$this->object->next();
		$this->assertEquals(array(
				'id' => 34,
				'first_field' => "test string two",
				'second_field' => 'some string two'
			), $this->object->current()->all());
		$this->assertEquals(1, $this->object->key());
		$this->object->next();
		$this->assertEquals(array(
				'id' => 76,
				'first_field' => "test string three",
				'second_field' => 'some string three'
			), $this->object->current()->all());
		$this->assertEquals(2, $this->object->key());
		$this->object->next();
		$this->assertFalse($this->object->valid());
		$this->object->rewind();
		$this->assertEquals(array(
				'id' => 12,
				'first_field' => "test string one",
				'second_field' => 'some string one'
			), $this->object->current()->all());
		$this->assertEquals(0, $this->object->key());
		$this->assertTrue($this->object->valid());
	}

	/**
	 * @covers ModelData::__get
	 * @expectedException ModelException
	 */
	public function test__getInvalid() {
		$this->assertEquals(array(12, 34, 76), $this->object->unexist);
	}

	/**
	 * @covers ModelData::__get
	 */
	public function test__get() {
		$this->assertEquals(array(12, 34, 76), $this->object->id);
	}

	/**
	 * @covers ModelData::__set
	 * @expectedException ModelException
	 */
	public function test__setInvalid() {
		$this->object->unexist = array(3, 2, 1);
	}

	/**
	 * @covers ModelData::__set
	 */
	public function test__set() {
		$this->object->id = array(3, 2, 1);
		$this->assertEquals(array(3, 2, 1), $this->object->id);
		$this->object->id = array(999);
		$this->assertEquals(array(
			array('id' => 999, 'first_field' => "test string one", 'second_field' => 'some string one'),
			array('id' => '', 'first_field' => "test string two", 'second_field' => 'some string two'),
			array('id' => '', 'first_field' => "test string three", 'second_field' => 'some string three'),
		), $this->object->data);
	}

	/**
	 * @covers ModelData::__isset
	 */
	public function test__isset() {
		$this->assertTrue(isset($this->object->id));
		unset($this->object->data[0]['id']);
		unset($this->object->data[2]['id']);
		$this->assertTrue(isset($this->object->id));
		unset($this->object->data[1]['id']);
		$this->assertFalse(isset($this->object->id));
	}

	/**
	 * @covers ModelData::__unset
	 */
	public function test__unset() {
		$this->assertTrue(isset($this->object->id));
		unset($this->object->id);
		$this->assertFalse(isset($this->object->id));
	}

	/**
	 * @covers ModelData::clear
	 */
	public function testClear() {
		$this->object->clear();
		$this->assertEquals(array(), $this->object->data);
	}

	/**
	 * @covers ModelData::count
	 */
	public function testCount() {
		$this->assertEquals(3, $this->object->count());
		unset($this->object->data[1]);
		$this->assertEquals(2, $this->object->count());
	}
}
